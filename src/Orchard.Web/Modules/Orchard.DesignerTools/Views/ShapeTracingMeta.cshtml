@functions {
    string FormatShapeFilename(string type, string themeId) {
        return "~/Themes/" + themeId + "/Views/" + type.Replace("__", "-").Replace("_", ".") + ".cshtml";
    }
}

<div class="shape-tracing meta shapeId-@Model.ShapeId" style="display:none">
	<ul class="debuggerMenu">
		<li class="shape selected first"><a href="#">Shape</a></li>
		<li class="model middle"><a href="#">Model</a></li>
		<li class="placement middle"><a href="#">Placement</a></li>
		<li class="templates middle"><a href="#">Templates</a></li>
		<li class="source middle"><a href="#">Source</a></li>
		<li class="html last"><a href="#">HTML</a></li>
	</ul>

	<div class="content">
		<div class="shape">
			Shape: @Model.ShapeType <br />
			Definition: @Model.Definition  <br />
			Display Type: @(Model.DisplayType  ?? "n/a")<br />
			Position: @(Model.Position ?? "n/a") <br />
			Placement Source: @(Model.PlacementSource ?? "n/a") <br />
		</div>
			
		<div class="model" style="display:none">
			<pre>@Model.Dump</pre>
		</div>

		<div class="placement" style="display:none">
			<pre>@Model.PlacementContent</pre>
		</div>

		<div class="templates" style="display:none">
			<div class="alternates">
				<span>Alternates</span>
				@foreach(var alternate in Model.Alternates) {
					var formatted = @FormatShapeFilename(alternate, WorkContext.CurrentTheme.Id);
					<div>@formatted</div>
				}
			</div>
			<div class="wrappers">
				<span >Wrappers</span>
				@foreach(var wrapper in Model.Wrappers) {
					if(wrapper != "ShapeTracing_Wrapper") {
						var formatted = @FormatShapeFilename(wrapper, WorkContext.CurrentTheme.Id);
						<div>@formatted</div>
					}
				}
			</div>
		</div>

		<div class="source" style="display:none">
			<pre>@Model.DefinitionContent</pre>
		</div>

		<div class="html" style="display:none">
			<pre>@HttpUtility.HtmlEncode(Display(Model.ChildContent))</pre>
		</div>
	</div>
</div>