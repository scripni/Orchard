@using Orchard.Utility.Extensions;

@functions {
    string FormatShapeFilename(string type, string themeId) {
        return "~/Themes/" + themeId + "/Views/" + type.Replace("__", "-").Replace("_", ".") + ".cshtml";
    }
    
    string RemoveBeacons(string htmlContent) {
        var regex = new System.Text.RegularExpressions.Regex(@"<script\sclass=""shape-tracing-wrapper(.*?)</script>");
        return regex.Replace(htmlContent, String.Empty);
    }

    string RemoveEmptyLines(string htmlContent) {
        var regex = new System.Text.RegularExpressions.Regex(@"[\r\n]+");
        return regex.Replace(htmlContent, System.Environment.NewLine);
    }
}


<script type="text/javascript">
shapeTracingMetadataHost[@Model.ShapeId] = {};

shapeTracingMetadataHost[@Model.ShapeId].shape = { 
    type: '@Model.ShapeType', 
    template: '@Model.Template', 
    originalTemplate: '@Model.OriginalTemplate',
    displayType: '@(String.IsNullOrEmpty((string)Model.DisplayType) ? T("n/a").Text : Model.DisplayType.ToString())',
    position: '@(String.IsNullOrEmpty((string)Model.Position) ? T("n/a").Text : Model.Position.ToString())',
    placement: '@(String.IsNullOrEmpty((string)Model.PlacementSource) ? T("n/a").Text : Model.PlacementSource.ToString())',
    alternates: [
        @foreach (var alternate in Model.Alternates) {
        <text>{</text>
        <text>filename: '@FormatShapeFilename(alternate, WorkContext.CurrentTheme.Id)',</text>
        <text>alternate: '@alternate',</text> 
        <text>template: '@Model.Template',</text>
        <text>returnUrl: '@Context.Request.RawUrl'</text>
        <text>},</text>
        }
    ],
    wrappers: [
        @foreach (var wrapper in Model.Wrappers) {
            if (wrapper == "ShapeTracingWrapper") { continue; }
        <text>{ filename: '@FormatShapeFilename(wrapper, WorkContext.CurrentTheme.Id)' },
        </text>
        }
    ],
    html: '@RemoveEmptyLines(RemoveBeacons(Display(Model.ChildContent).ToString())).Replace(Environment.NewLine, "\\n")',
    templateContent: '@(String.IsNullOrWhiteSpace((string)Model.TemplateContent) ? @T("Content not available as coming from source code.") : @Model.TemplateContent.Replace(Environment.NewLine, "\\n"))',
    model: { @(new MvcHtmlString((string)@Model.Dump)) }
};

@if(!String.IsNullOrEmpty((string)Model.PlacementSource) && !TempData.ContainsKey((string)Model.PlacementSource)) {
    TempData[(string)Model.PlacementSource] = new object();
<text>shapeTracingMetadataHost.placement['@Model.PlacementSource.ToString()'] = '@Model.PlacementContent.Replace(Environment.NewLine, "\\n")'; </text>
}

</script>
