@functions {
    string FormatShapeFilename(string type, string themeId) {
        return "~/Themes/" + themeId + "/Views/" + type.Replace("__", "-").Replace("_", ".") + ".cshtml";
    }
    
    string RemoveBeacons(string htmlContent) {
        var regex = new System.Text.RegularExpressions.Regex(@"<script\sclass=""shape-tracing-wrapper(.*?)</script>");
        return regex.Replace(htmlContent, String.Empty);
    }

    string RemoveEmptyLines(string htmlContent) {
        var regex = new System.Text.RegularExpressions.Regex(@"[\r\n]+");
        return regex.Replace(htmlContent, System.Environment.NewLine);
    }
}

<div class="shape-tracing-meta" shape-id-meta="@Model.ShapeId" style="display:none">
    <ul class="shape-tracing-tabs">
        <li class="shape selected first"><a href="#">Shape</a></li>
        <li class="model middle"><a href="#">Model</a></li>
        <li class="placement middle"><a href="#">Placement</a></li>
        <li class="templates middle"><a href="#">Templates</a></li>
        <li class="source middle"><a href="#">Source</a></li>
        <li class="html last"><a href="#">HTML</a></li>
    </ul>

    <div class="shape-tracing-meta-content">
        <div class="shape grid-display">
            <ul class="properties">
                <li><div class="name">Shape</div><div class="value">@Model.ShapeType</div></li>
                <li><div class="name">Definition</div><div class="value">@Model.Definition</div></li>
                <li><div class="name">Display Type</div><div class="value">@(String.IsNullOrEmpty((string)Model.DisplayType) ? T("n/a").Text : Model.DisplayType.ToString())</div></li>
                <li><div class="name">Position</div><div class="value">@(String.IsNullOrEmpty((string)Model.Position) ? T("n/a").Text : Model.Position.ToString())</div></li>
                <li><div class="name">Placement Source</div><div class="value">@(String.IsNullOrEmpty((string)Model.PlacementSource) ? T("n/a").Text : Model.PlacementSource.ToString())</div></li>
            </ul>
        </div>
            
        <div class="model grid-display" style="display:none">
            <div class="shape-tracing-breadcrumb"></div>
            @(new MvcHtmlString(@Model.Dump))
        </div>

        <div class="placement" style="display:none">
            <textarea id="placement-@Model.ShapeId" name="placement-@Model.ShapeId">@Model.PlacementContent</textarea>
        </div>

        <div class="templates" style="display:none">
            <div class="alternates">
                <span>Alternates</span>
                @foreach(var alternate in Model.Alternates) {
                    var formatted = @FormatShapeFilename(alternate, WorkContext.CurrentTheme.Id);
                    <div>@formatted</div>
                }
            </div>
            <div class="wrappers">
                <span >Wrappers</span>
                @foreach(var wrapper in Model.Wrappers) {
                    if(wrapper != "ShapeTracing_Wrapper") {
                        var formatted = @FormatShapeFilename(wrapper, WorkContext.CurrentTheme.Id);
                        <div>@formatted</div>
                    }
                }
            </div>
        </div>

        <div class="source" style="display:none">
            <textarea id="source-@Model.ShapeId" name="source-@Model.ShapeId">@Model.DefinitionContent</textarea>
        </div>

        <div class="html" style="display:none">
            <textarea id="html-@Model.ShapeId" name="html-@Model.ShapeId">@RemoveEmptyLines(RemoveBeacons(Display(Model.ChildContent).ToString()))</textarea>
        </div>
    </div>
</div>
