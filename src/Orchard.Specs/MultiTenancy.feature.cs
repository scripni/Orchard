// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.2.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Orchard.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Multiple tenant management")]
    public partial class MultipleTenantManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MultiTenancy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiple tenant management", "In order to host several isolated web applications\r\nAs a root Orchard system oper" +
                    "ator\r\nI want to create and manage tenant configurations", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Default site is listed")]
        public virtual void DefaultSiteIsListed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default site is listed", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I have installed Orchard");
#line 8
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 9
testRunner.When("I go to \"Admin/MultiTenancy\"");
#line 10
testRunner.Then("I should see \"List of Site&#39;s Tenants\"");
#line 11
testRunner.And("I should see \"<span class=\"tenantName\">Default</span>\"");
#line 12
testRunner.And("the status should be 200 OK");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New tenant fields are required")]
        public virtual void NewTenantFieldsAreRequired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New tenant fields are required", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("I have installed Orchard");
#line 16
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 17
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line 18
testRunner.And("I hit \"Save\"");
#line 19
testRunner.Then("I should see \"is required\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A new tenant is created")]
        public virtual void ANewTenantIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant is created", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
testRunner.Given("I have installed Orchard");
#line 23
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 24
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Scott"});
#line 25
testRunner.And("I fill in", ((string)(null)), table1);
#line 28
testRunner.And("I hit \"Save\"");
#line 29
testRunner.And("I am redirected");
#line 30
testRunner.Then("I should see \"<span class=\"tenantName\">Scott</span>\"");
#line 31
testRunner.And("the status should be 200 OK");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A new tenant is created with uninitialized state")]
        public virtual void ANewTenantIsCreatedWithUninitializedState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant is created with uninitialized state", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
testRunner.Given("I have installed Orchard");
#line 35
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 36
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Scott"});
#line 37
testRunner.And("I fill in", ((string)(null)), table2);
#line 40
testRunner.And("I hit \"Save\"");
#line 41
testRunner.And("I am redirected");
#line 42
testRunner.Then("I should see \"<li class=\"tenant Uninitialized\">\"");
#line 43
testRunner.And("the status should be 200 OK");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A new tenant goes to the setup screen")]
        public virtual void ANewTenantGoesToTheSetupScreen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant goes to the setup screen", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
testRunner.Given("I have installed Orchard");
#line 47
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 48
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table3.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 49
testRunner.And("I fill in", ((string)(null)), table3);
#line 53
testRunner.And("I hit \"Save\"");
#line 54
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line 55
testRunner.Then("I should see \"Welcome to Orchard\"");
#line 56
testRunner.And("I should see \"Finish Setup\"");
#line 57
testRunner.And("the status should be 200 OK");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A new tenant with preconfigured database goes to the setup screen")]
        public virtual void ANewTenantWithPreconfiguredDatabaseGoesToTheSetupScreen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant with preconfigured database goes to the setup screen", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given("I have installed Orchard");
#line 61
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 62
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table4.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
            table4.AddRow(new string[] {
                        "DataProvider",
                        "SqlCe"});
#line 63
testRunner.And("I fill in", ((string)(null)), table4);
#line 68
testRunner.And("I hit \"Save\"");
#line 69
testRunner.And("I am redirected");
#line 70
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line 71
testRunner.Then("I should see \"Welcome to Orchard\"");
#line 72
testRunner.And("I should see \"Finish Setup\"");
#line 73
testRunner.And("I should not see \"SQL Server Compact\"");
#line 74
testRunner.And("the status should be 200 OK");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A new tenant runs the setup")]
        public virtual void ANewTenantRunsTheSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant runs the setup", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
testRunner.Given("I have installed Orchard");
#line 78
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 79
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table5.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table5.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 80
testRunner.And("I fill in", ((string)(null)), table5);
#line 84
testRunner.And("I hit \"Save\"");
#line 85
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table6.AddRow(new string[] {
                        "SiteName",
                        "Scott Site"});
            table6.AddRow(new string[] {
                        "AdminPassword",
                        "6655321"});
#line 86
testRunner.And("I fill in", ((string)(null)), table6);
#line 90
testRunner.And("I hit \"Finish Setup\"");
#line 91
testRunner.And("I go to \"/Default.aspx\"");
#line 92
testRunner.Then("I should see \"<h1>Scott Site</h1>\"");
#line 93
testRunner.And("I should see \"Welcome, <strong>admin</strong>!\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An existing initialized tenant cannot have its database option cleared")]
        public virtual void AnExistingInitializedTenantCannotHaveItsDatabaseOptionCleared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An existing initialized tenant cannot have its database option cleared", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
testRunner.Given("I have installed Orchard");
#line 97
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 98
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table7.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table7.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 99
testRunner.And("I fill in", ((string)(null)), table7);
#line 103
testRunner.And("I hit \"Save\"");
#line 104
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table8.AddRow(new string[] {
                        "SiteName",
                        "Scott Site"});
            table8.AddRow(new string[] {
                        "AdminPassword",
                        "6655321"});
#line 105
testRunner.And("I fill in", ((string)(null)), table8);
#line 109
testRunner.And("I hit \"Finish Setup\"");
#line 110
testRunner.And("I go to \"/Admin/MultiTenancy/Edit/Scott\" on host localhost");
#line 111
testRunner.Then("I should see \"<h1>Edit Tenant</h1>\"");
#line 112
testRunner.And("I should see \"<h2>Scott</h2>\"");
#line 113
testRunner.And("I should not see \"Allow the tenant to set up the database\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Default tenant cannot be disabled")]
        public virtual void DefaultTenantCannotBeDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default tenant cannot be disabled", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line 116
testRunner.Given("I have installed Orchard");
#line 117
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 118
testRunner.When("I go to \"Admin/MultiTenancy\"");
#line 119
testRunner.Then("I should not see \"<form action=\"/Admin/MultiTenancy/disable\"\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A running tenant can be disabled")]
        public virtual void ARunningTenantCanBeDisabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A running tenant can be disabled", ((string[])(null)));
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
testRunner.Given("I have installed Orchard");
#line 123
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 124
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table9.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table9.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 125
testRunner.And("I fill in", ((string)(null)), table9);
#line 129
testRunner.And("I hit \"Save\"");
#line 130
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table10.AddRow(new string[] {
                        "SiteName",
                        "Scott Site"});
            table10.AddRow(new string[] {
                        "AdminPassword",
                        "6655321"});
#line 131
testRunner.And("I fill in", ((string)(null)), table10);
#line 135
testRunner.And("I hit \"Finish Setup\"");
#line 136
testRunner.And("I go to \"/Admin/MultiTenancy\" on host localhost");
#line 137
testRunner.And("I hit \"Suspend\"");
#line 138
testRunner.And("I am redirected");
#line 139
testRunner.Then("I should see \"<form action=\"/Admin/MultiTenancy/enable\"\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A running tenant which is disabled can be enabled")]
        public virtual void ARunningTenantWhichIsDisabledCanBeEnabled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A running tenant which is disabled can be enabled", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
testRunner.Given("I have installed Orchard");
#line 143
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 144
testRunner.When("I go to \"Admin/MultiTenancy/Add\"");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table11.AddRow(new string[] {
                        "Name",
                        "Scott"});
            table11.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 145
testRunner.And("I fill in", ((string)(null)), table11);
#line 149
testRunner.And("I hit \"Save\"");
#line 150
testRunner.And("I go to \"/Setup\" on host scott.example.org");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table12.AddRow(new string[] {
                        "SiteName",
                        "Scott Site"});
            table12.AddRow(new string[] {
                        "AdminPassword",
                        "6655321"});
#line 151
testRunner.And("I fill in", ((string)(null)), table12);
#line 155
testRunner.And("I hit \"Finish Setup\"");
#line 156
testRunner.And("I go to \"/Admin/MultiTenancy\" on host localhost");
#line 157
testRunner.And("I hit \"Suspend\"");
#line 158
testRunner.And("I am redirected");
#line 159
testRunner.And("I hit \"Resume\"");
#line 160
testRunner.And("I am redirected");
#line 161
testRunner.Then("I should see \"<form action=\"/Admin/MultiTenancy/disable\"\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Listing tenants from command line")]
        public virtual void ListingTenantsFromCommandLine()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listing tenants from command line", ((string[])(null)));
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
testRunner.Given("I have installed Orchard");
#line 165
testRunner.And("I have installed \"Orchard.MultiTenancy\"");
#line 166
testRunner.And("I have tenant \"Alpha\" on \"example.org\" as \"New-site-name\"");
#line 167
testRunner.When("I execute >tenant list");
#line 168
testRunner.Then("I should see \"Name: Alpha\"");
#line 169
testRunner.And("I should see \"Request Url Host: example.org\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
